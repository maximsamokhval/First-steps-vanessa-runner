#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем КонтекстЯдра; // ядро xunit
Перем Ожидаем; // модуль BDD ( УтвержденияBDD);
Перем ГенерацияДанных; // модуль (СериализаторMXL)
Перем Коллекции; // собственный плагин
// Расположение плагинов по умолчанию
// C:\Program Files\OneScript\lib\add\plugins

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура - Инициализация
//
// Параметры:
//  КонтекстЯдраПараметр - ядро xunit	 - 
//
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ГенерацияДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	Коллекции = КонтекстЯдра.Плагин("Коллекции");
	
КонецПроцедуры

// Процедура - Заполнить набор тестов
//
// Параметры:
//  НаборТестов	 - ВнешняяОбработкаОбъект	 -  плагин ЗагрузчикФайла
//
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт	
	
	НаборТестов.НачатьГруппу("Тестирование методов HTTP");
	НаборТестов.Добавить("Тест_ВыполнитьМетодGET", "Тест должен выполнить метод GET");	
	НаборТестов.Добавить("Тест_ВыполнитьМетодGETИВернутьНоменклатуру", "Тест должен выполнить метод GET и вернуть номенклатуру");	
	
	// ПРИМЕР параметризированного теста
	//ПараметрыТеста = НаборТестов.ПараметрыТеста("000000037"); // КОД ТОВАРА . массив
	//НаборТестов.Добавить("Тест_ВыполнитьМетодGETВернутьНоменклатуруСПараметром", ПараметрыТеста , "Вернуть описание товара с кодом 000000037") ;
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область ЮнитТесты

Процедура Тест_ВыполнитьМетодGET() Экспорт 
	
	// http://localhost/Platform8Demo/hs/Products/
	ПараметрыАвторизаци = НовыеПараметрыАвторизации();
	ПараметрыHTTP = НовыеПараметрыHTTP();
	
	HTTPConncetion = Новый HTTPСоединение(
		ПараметрыHTTP.Сервер,,
		ПараметрыАвторизаци.Пользователь,
		ПараметрыАвторизаци.Пароль,,
		ПараметрыHTTP.Таймаут); 		
		
	Заголовки = Новый Соответствие;
	HTTPЗапрос = Новый HTTPЗапрос("hs/Products/", Заголовки);
	
	HTTPОтвет = HTTPConncetion.ВызватьHTTPМетод("GET", HTTPЗапрос); 
	
	Ожидаем.Что(HTTPОтвет.КодСостояния).Равно(200);
		
КонецПроцедуры

Процедура Тест_ВыполнитьМетодGETИВернутьНоменклатуру() Экспорт 
	
	СтруктураДанных = ГенерацияДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Ссылки"); 
	HTTPОтвет = HTTPОтветProducts(СтруктураДанных.Колбаса.Код);
	// проверка на правильный запрос
	Ожидаем.Что(HTTPОтвет.КодСостояния).Равно(200);	
	ТелоСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	_Значение = XMLtoXDTO( ТелоСтрокой );
	
	Коллекции.ДанныеСовпадают(_Значение.CatalogObject_Товары.Code, СтруктураДанных.Колбаса.Код);
	
	Ожидаем.Что(_Значение).ИмеетТип(Тип("ОбъектXDTO"));
	Ожидаем.Что(_Значение.CatalogObject_Товары.Code).Равно(СтруктураДанных.Колбаса.Код);
	Ожидаем.Что(_Значение.CatalogObject_Товары.Описание).Равно(СтруктураДанных.Колбаса.Описание);
	
КонецПроцедуры

// Процедура - Тест выполнить метод GETВернуть номенклатуру с параметром
//
// Параметры:
//  КодНоменклатуры	 - Строка - код, проверяемой номенклатуры 
//
Процедура Тест_ВыполнитьМетодGETВернутьНоменклатуруСПараметром(КодНоменклатуры) Экспорт 
	
	HTTPОтвет = HTTPОтветProducts(КодНоменклатуры);
	
	Ожидаем.Что(HTTPОтвет.КодСостояния).Равно(200);	
	ТелоСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	XDTOObject = XMLtoXDTO( ТелоСтрокой );

	Ожидаем.Что(XDTOObject).ИмеетТип(Тип("ОбъектXDTO"));
	Ожидаем.Что(XDTOObject.CatalogObject_Товары.Code).Равно(КодНоменклатуры);
	
	// Родитель из метода соответствует родителю номенклатуры 
	Ожидаем.Что(XDTOObject.CatalogObject_Товары.Parent).Равно(XMLСтрока(Справочники.Товары.НайтиПоКоду(КодНоменклатуры).Родитель));
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - HTTPОтвет products
//
// Параметры:
//  КодНоменклатуры	 - Строка  - код проверяемой номенклатуры 
// 
// Возвращаемое значение:
//   - 
//
Функция HTTPОтветProducts(КодНоменклатуры)
	
	// http://localhost/Platform8Demo/hs/Products/
	ПараметрыАвторизаци = НовыеПараметрыАвторизации();
	ПараметрыHTTP = НовыеПараметрыHTTP();
	
	HTTPConncetion = Новый HTTPСоединение(
		ПараметрыHTTP.Сервер,,
		ПараметрыАвторизаци.Пользователь,
		ПараметрыАвторизаци.Пароль,,
		ПараметрыHTTP.Таймаут); 		
		
	Заголовки = Новый Соответствие;
	HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон("hs/Products/%1", КодНоменклатуры), Заголовки);
	HTTPОтвет = HTTPConncetion.ВызватьHTTPМетод("GET", HTTPЗапрос); 
	Возврат HTTPОтвет;
	
КонецФункции

Функция НовыеПараметрыАвторизации()
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Пользователь", "Администратор");
	ПараметрыАвторизации.Вставить("Пароль", "123");
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

Функция НовыеПараметрыHTTP()
	
	ПараметрыHTTP = Новый Структура;
	ПараметрыHTTP.Вставить("Сервер", "localhost/Platform8Demo"); // localhost/Platform8Demo
	ПараметрыHTTP.Вставить("Таймаут", 30); // 30 сек.	
	Возврат ПараметрыHTTP;
	
КонецФункции

Функция XMLtoXDTO(СтрокаXML, Фабрика = Неопределено)
	
	Если Фабрика = Неопределено Тогда
		Фабрика = ФабрикаXDTO;
	КонецЕсли; 
	
	ЧтениеXml = Новый ЧтениеXML;
	ЧтениеXml.УстановитьСтроку( СтрокаXML );
	_Значение =  Фабрика.ПрочитатьXML(ЧтениеXml);
	ЧтениеXml.Закрыть();

	Возврат _Значение;
	
КонецФункции

#КонецОбласти
    
#Иначе
 ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли